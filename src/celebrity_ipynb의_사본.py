# -*- coding: utf-8 -*-
"""celebrity.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ct71Y6gafqRYFfT_dIlhtAxqz2y0Nfti
"""

from google.colab import drive
drive.mount('/content/drive')

import dlib, cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import ImageFont, ImageDraw, Image
# import tensorflow.keras 
# from tensorflow.keras import backend as K
import glob

detector = dlib.get_frontal_face_detector()
sp = dlib.shape_predictor('/content/drive/MyDrive/Colab Notebooks/Data/shape_predictor_68_face_landmarks.dat')
facerec = dlib.face_recognition_model_v1('/content/drive/MyDrive/Colab Notebooks/Data/dlib_face_recognition_resnet_model_v1.dat')

# 이미지에서 얼굴을 찾고, 랜드마크를 찾는 함수
def find_faces(img):
    dets = detector(img, 1)

    if len(dets) == 0:
        return np.empty(0), np.empty(0), np.empty(0)
    
    rects, shapes = [], []
    shapes_np = np.zeros((len(dets), 68, 2), dtype=np.int)
    # print(f"================={shapes_np.shape}") # 1, 68, 2 (1개의 이미지에서 x,y 좌표 68개)
    for k, d in enumerate(dets):
        rect = ((d.left(), d.top()), (d.right(), d.bottom()))
        rects.append(rect)

        # sp: dlib.shape_predictor, 인자로 학습된 landmark.dat 포함
        # shape에는 68개의 랜드마크가 출력
        shape = sp(img, d)

        
        # convert dlib shape to numpy array
        # shapes_np[img_#][randmark_#]=(x, y 좌표)
        for i in range(0, 68):
            shapes_np[k][i] = (shape.part(i).x, shape.part(i).y)

        shapes.append(shape)
        
    return rects, shapes, shapes_np


# 얼굴 이미지, 랜드마크를 128개의 벡터로 변환
def encode_faces(img, shapes):
    face_descriptors = []
    for shape in shapes:
        face_descriptor = facerec.compute_face_descriptor(img, shape)
        face_descriptors.append(np.array(face_descriptor))

    return np.array(face_descriptors)

label_name = []
label_class = {}
img_paths = glob.glob("/content/drive/MyDrive/Colab Notebooks/Data/celebrity_img/*")

for path in img_paths:
    name = path.split(".")[0][9:]
    label_name.append(name)
    label_class[name] = path


print(label_name, label_class[label_name[0]])
print(len(label_class))

descs = []

for name, label_path in label_class.items():
    img = cv2.imread(label_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # BGR -> RGB
    _, img_shapes, _ = find_faces(img)
    # descs.append([name, encode_faces(img, img_shapes)])
    descs.append([name, encode_faces(img, img_shapes)[0]])

np.save('descs.npy', descs)
# print(descs)

descs = np.load('descs.npy', allow_pickle=True)

# def draw(img, comment, x, y, h, size):
def draw(img):
    img = Image.fromarray(img)
    draw = ImageDraw.Draw(img)
    # draw.text((x+5,y+h), comment, font=ImageFont.truetype("./batang.ttc", size), fill=(40,180,120))
    # draw.text((x+5,y+h), comment, fill=(40,180,120))
    
    return np.array(img)

# img = cv2.imread('/content/drive/MyDrive/Colab Notebooks/Data/test_img/taeyeon.jpg')
img = cv2.imread('/content/drive/MyDrive/Colab Notebooks/Data/test_img/jenny1.jpg')
# img = cv2.imread('/content/drive/MyDrive/Colab Notebooks/Data/test_img/seokgu3.jpg')
# img = cv2.imread('/content/drive/MyDrive/Colab Notebooks/Data/test_img/cap1.jpg')
# img = cv2.imread('/content/drive/MyDrive/Colab Notebooks/Data/test_img/hoyeong1.jpg')

fig = plt.figure()
rows = 1
cols = 2
img = cv2.flip(img, 1) # 좌우 대칭
# draw(img)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
ax1 = fig.add_subplot(rows, cols, 1)
ax1.imshow(img)
rects, shapes, _ = find_faces(img) # 얼굴 찾기
descriptors = encode_faces(img, shapes) # 인코딩

if(len(descriptors) == 0):
    print("얼굴 인식이 안되었네요ㅜㅜ \n다시 찍어주세요!")
elif(len(descriptors) > 1):
    print("여러 명이 인식이 되었네요ㅜㅜ \n혼자 다시 찍어주세요!")
else:
    desc = descriptors[0]
    x = rects[0][0][0] # 얼굴 X 좌표
    y = rects[0][0][1] # 얼굴 Y 좌표
    w = rects[0][1][0]-rects[0][0][0] # 얼굴 너비 
    h = rects[0][1][1]-rects[0][0][1] # 얼굴 높이        

    descs1 = sorted(descs, key=lambda x: np.linalg.norm([desc] - x[1]))
    # print(descs1)
    dist = np.linalg.norm([desc] - descs1[0][1], axis=1)
    if dist < 0.6:
        name = descs1[0][0]
        comment = "{0}을 닮으셨네요. ^^;;;;".format(name) 
        print(label_class[name])
        img = cv2.imread(label_class[name])
        # img = cv2.imread("/content/drive/MyDrive/Colab Notebooks/Data/celebrity_img/taeyeon.jpg")
#             img = cv2.resize(img, dsize=(780, 520))
        # result = draw(img, comment, x-10, y, h, 36)
        result = draw(img)
    else:
        comment = "닮은 연예인이 없네요\nㅜㅜ 성형하고 오세요!\n"
        # img = cv2.imread("test_img/ojingeo.jpg")
        # result = draw(img, comment, 50, 10, h, 24)

    print("거리: %.3f" % dist[0])
    print(comment)
    result = cv2.cvtColor(result, cv2.COLOR_BGR2RGB) # BGR -> RGB
    ax2 = fig.add_subplot(rows, cols, 2)
    ax2.imshow(result)

    plt.show()

cv2.waitKey(0)
cv2.destroyAllWindows()

